# Gmail Order Tracking System - Product Requirements Document

## 1. Product Overview

### Vision
A personal dashboard that automatically extracts and tracks shipment information from Gmail emails, providing users with real-time visibility into their package deliveries.

### Goals
- Eliminate manual package tracking by automatically processing shipping emails
- Provide a clean, organized view of all active and delivered shipments
- Focus on reliability and accuracy through domain-specific email parsing

## 2. User Stories

### Primary User Flow
1. **Authentication**: User logs in with Gmail OAuth
2. **Initial Sync**: System searches Gmail for shipping emails and extracts shipment data
3. **Dashboard View**: User sees all shipments organized by status (active first, then delivered)
4. **Automatic Updates**: System checks for new emails every 10 minutes via cron job
5. **Manual Refresh**: User can trigger immediate Gmail search via refresh button
6. **Status Tracking**: Shipments automatically update as new emails arrive (shipped → out for delivery → delivered)

### User Personas
- **Primary**: Individual consumers who frequently order online
- **Use Case**: Want to track multiple packages without manually checking each carrier's website

## 3. Technical Architecture

### Tech Stack
**Phase 1 (Local Development):**
- **Frontend**: Next.js (React)
- **UI Library**: shadcn/ui
- **Backend**: Next.js API routes
- **Database**: SQLite with Prisma ORM
- **Authentication**: Gmail OAuth 2.0 (local storage)
- **Email Processing**: Gmail API (read-only scope)
- **File Storage**: Local JSON/SQLite for settings and logs

**Future Phases:**
- **Database**: Migrate to Supabase (PostgreSQL)
- **Hosting**: Deploy to Vercel
- **Authentication**: Secure token management

### System Components

#### 3.1 Authentication Service
- Gmail OAuth 2.0 integration
- Persistent session management
- Multi-user support
- Token refresh handling

#### 3.2 Gmail Integration Service
- Read-only Gmail API access
- Domain-filtered email search
- Email content retrieval
- Rate limiting compliance

#### 3.3 Email Processing Engine
- Domain recognition system
- DOM-based data extraction (not text parsing)
- Multiple template support per domain
- Error handling and logging

#### 3.4 Data Management
- Shipment deduplication logic
- Status update tracking
- Field-level update validation
- Audit logging

#### 3.5 Cron Job System
- Configurable intervals (default: 10 minutes)
- Background email processing
- Error recovery and retry logic

## 4. Database Schema (Phase 1: SQLite)

### Users Table
```sql
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  gmail_email TEXT UNIQUE,
  gmail_tokens TEXT, -- JSON string
  settings TEXT, -- JSON string
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_active DATETIME
);
```

### Shipments Table
```sql
CREATE TABLE shipments (
  id TEXT PRIMARY KEY,
  user_id TEXT REFERENCES users(id),
  tracking_number TEXT,
  carrier TEXT,
  
  -- Ship24 Status Fields
  status_milestone TEXT CHECK(status_milestone IN (
    'pending', 'info_received', 'in_transit', 'out_for_delivery', 
    'failed_attempt', 'available_for_pickup', 'delivered', 'exception'
  )),
  status_category TEXT CHECK(status_category IN (
    'data', 'transit', 'destination', 'customs', 'delivery', 'exception'
  )),
  status_code TEXT, -- Specific codes like 'delivery_delivered', 'transit_handover', etc.
  raw_status TEXT, -- Original status text from carrier email
  
  -- Delivery Information
  delivery_address TEXT,
  estimated_delivery DATETIME,
  actual_delivery DATETIME,
  failed_delivery_attempts INTEGER DEFAULT 0,
  pickup_location TEXT, -- For available_for_pickup status
  
  -- Product Information
  sender_domain TEXT,
  product_name TEXT,
  product_image TEXT,
  
  -- Tracking
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_status_change DATETIME, -- When the status_milestone last changed
  
  UNIQUE(user_id, tracking_number, carrier)
);
```

**Migration Path**: This simplified structure will map directly to Supabase PostgreSQL in future phases.

### Processing Logs Table
```sql
CREATE TABLE processing_logs (
  id TEXT PRIMARY KEY,
  user_id TEXT REFERENCES users(id),
  email_id TEXT,
  sender_domain TEXT,
  extraction_success BOOLEAN,
  extracted_fields TEXT, -- JSON string
  errors TEXT,
  processed_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

**Migration Path**: These tables will map directly to Supabase PostgreSQL in future phases.

## 5. Core Features

### 5.1 Authentication & User Management
- **Gmail OAuth Login**: Single sign-on with Google
- **Session Persistence**: Maintain login state across browser sessions
- **Multi-user Support**: Support multiple users on the same instance
- **Logout Functionality**: Clear sessions and revoke tokens

### 5.2 Email Processing
- **Domain Whitelist**: Start with DHL and PostNL
- **Template-based Extraction**: DOM parsing logic specific to each sender
- **Multi-template Support**: Handle different email formats from same sender
- **Deduplication**: Prevent duplicate shipments from multiple emails

### 5.3 Dashboard Interface
- **Shipment Cards**: Visual cards showing key shipment information
- **Status-based Sorting**: Active shipments first (pending → delivered), then by last updated
- **Ship24 Status Indicators**: 
  - **Active**: `pending`, `info_received`, `in_transit`, `out_for_delivery`, `failed_attempt`, `available_for_pickup`
  - **Completed**: `delivered` (greyed out)
  - **Issues**: `exception` (red/warning styling)
- **Visual Status Colors**:
  - Green: `delivered`
  - Blue: `in_transit`, `out_for_delivery` 
  - Orange: `pending`, `info_received`
  - Yellow: `available_for_pickup`, `failed_attempt`
  - Red: `exception`
- **Refresh Button**: Manual trigger for Gmail search

### 5.4 Background Processing
- **Cron Jobs**: Automatic email checking every 10 minutes
- **Configurable Intervals**: Admin setting for check frequency
- **Error Handling**: Graceful failure recovery
- **Logging**: Debug logs for troubleshooting

## 6. Data Extraction Logic

### 6.1 Domain Recognition System
```javascript
const SUPPORTED_DOMAINS = {
  'dhl.com': DHLExtractor,
  'postnl.nl': PostNLExtractor
  // Future: 'coolblue.nl', 'amazon.nl', etc.
};
```

### 6.2 Extraction Strategy
1. **Domain Identification**: Parse sender email domain
2. **Template Matching**: Try multiple extraction templates per domain
3. **DOM Parsing**: Use Cheerio for HTML structure parsing
4. **Field Validation**: Only update database fields with successfully extracted data
5. **Error Logging**: Log extraction attempts and failures

### 6.5 Extracted Fields Priority
- **Critical**: tracking_number, carrier, status_milestone, raw_status
- **Important**: delivery_address, estimated_delivery, status_category, status_code
- **Optional**: product_name, product_image, actual_delivery, pickup_location

### 6.6 Status Mapping Strategy
```javascript
// Email parsing should map carrier-specific status to Ship24 standards
const STATUS_MAPPINGS = {
  dhl: {
    'delivered': { milestone: 'delivered', category: 'delivery', code: 'delivery_delivered' },
    'out for delivery': { milestone: 'out_for_delivery', category: 'delivery', code: 'delivery_out_for_delivery' },
    'in transit': { milestone: 'in_transit', category: 'transit', code: 'transit_handover' },
    'shipment picked up': { milestone: 'in_transit', category: 'transit', code: 'transit_handover' }
  },
  postnl: {
    'bezorgd': { milestone: 'delivered', category: 'delivery', code: 'delivery_delivered' },
    'onderweg naar je toe': { milestone: 'out_for_delivery', category: 'delivery', code: 'delivery_out_for_delivery' }
    // Add more PostNL mappings...
  }
};
```

## 7. User Interface Specifications

### 7.1 Dashboard Layout
- **Component Library**: shadcn/ui will be used for all UI components, including dashboard layout, shipment cards, buttons, and form elements.
- **Header**: Logo, user email, refresh button, logout
- **Main Content**: Grid of shipment cards
- **Card Information**:
  - Carrier logo/name
  - Tracking number
  - Status badge
  - Delivery address (truncated)
  - Estimated/actual delivery date
  - Product name (if available)

### 7.2 Visual Design
- **Component Library**: shadcn/ui will provide the base for consistent, accessible, and modern UI components throughout the application.
- **Active Shipments**: Full color based on status milestone
- **Delivered Shipments**: Greyed out, lower in sort order  
- **Exception Shipments**: Red styling with clear error indication
- **Status Badge Design**:
  - `pending`: Grey badge "Pending"
  - `info_received`: Light blue "Info Received" 
  - `in_transit`: Blue "In Transit"
  - `out_for_delivery`: Orange "Out for Delivery"
  - `failed_attempt`: Yellow "Delivery Failed" 
  - `available_for_pickup`: Purple "Ready for Pickup"
  - `delivered`: Green "Delivered"
  - `exception`: Red "Exception"
- **Responsive Design**: Mobile-friendly card layout
- **Special Handling**: 
  - Show pickup location for `available_for_pickup`
  - Show retry count for `failed_attempt`
  - Show exception details for `exception` status

## 8. Error Handling & Logging

### 8.1 Processing Errors
- Continue processing other emails if one fails
- Log extraction failures with email details
- Update last_updated timestamp regardless of success/failure
- Preserve existing data if extraction partially fails

### 8.2 Logging Strategy (Phase 1)
- **Local Log Files**: 
  - `/logs/processing.log` - Detailed extraction attempts
  - `/logs/errors.log` - Error tracking and debugging
  - `/logs/gmail-api.log` - API call logging
- **SQLite Logging**: Processing attempts stored in database
- **Console Logging**: Development debugging output
- **Log Rotation**: Implement basic log file management

**Future**: Migrate to structured logging service in production

## 9. Security & Privacy

### 9.1 Data Protection
- **Minimal Data Storage**: No original email content stored
- **OAuth Tokens**: Securely stored and refreshed
- **Read-only Access**: Gmail API limited to read permissions

### 9.2 User Privacy
- **Personal Use Only**: No data sharing between users
- **Data Retention**: Users can delete their account and all data
- **Transparent Processing**: Clear about what data is extracted

## 10. Success Metrics

### 10.1 Technical Metrics
- **Extraction Accuracy**: % of emails successfully parsed
- **System Uptime**: Availability of dashboard and processing
- **Processing Speed**: Time from email arrival to dashboard update

### 10.2 User Experience Metrics
- **User Retention**: Daily/weekly active users
- **Feature Usage**: Refresh button usage, session duration
- **Error Rates**: Failed authentications, processing errors

## 11. Future Roadmap (Post-MVP)

### Phase 2: Merchant Integration
- Add merchant-specific parsers (Coolblue, Amazon, Bol.com)
- Implement Orders concept with multiple Shipments per Order
- Enhanced product information extraction

### Phase 3: Real-time Tracking (Ship24 Integration)
- Ship24 API integration for live status updates
- Automatic status synchronization using Ship24's standardized statuses
- Push notifications for status changes
- Delivery prediction improvements using Ship24 data
- Optional: Event history logging if detailed tracking timeline becomes needed

### Phase 4: Advanced Features
- Package delivery photo capture
- Delivery history analytics
- Integration with calendar apps for delivery scheduling

## 12. Implementation Priority

### Sprint 1: Core Infrastructure (Phase 1 - Local)
1. Next.js project setup with TypeScript
2. Prisma + SQLite database setup
3. Gmail OAuth integration (local token storage)
4. Basic user authentication flow
5. Local logging system setup

### Sprint 2: Email Processing
1. Gmail API integration with local auth
2. Domain recognition system
3. DHL email parser implementation
4. Basic shipment storage in SQLite
5. Cheerio-based DOM parsing framework

### Sprint 3: Dashboard & UI
1. Shipment card components
2. Dashboard layout and sorting
3. Status visualization
4. Refresh functionality
5. Local state management

### Sprint 4: Background Processing
1. Node-cron job implementation
2. Error handling and local logging
3. PostNL parser addition
4. Deduplication logic
5. Local file-based configuration

### Sprint 5: Polish & Migration Prep
1. UI/UX improvements
2. Error handling refinement
3. Prepare for Supabase migration
4. Production deployment planning
5. User testing with local setup

## 13. Technical Considerations

### 13.1 Gmail API Limitations
- Daily quota: 1 billion quota units
- Per-user rate limit: 250 quota units per user per second
- Batch processing for efficiency

### 13.2 Scalability Planning
- Database indexing on user_id and tracking_number
- Efficient cron job scheduling
- Stateless architecture for horizontal scaling

### 13.3 Monitoring & Maintenance
- Health check endpoints
- Processing success/failure tracking
- Regular token refresh monitoring